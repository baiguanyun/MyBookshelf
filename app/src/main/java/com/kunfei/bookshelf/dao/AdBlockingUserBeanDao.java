package com.kunfei.bookshelf.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.kunfei.bookshelf.bean.AdBlockingUserBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AD_BLOCKING_USER_BEAN".
 */
public class AdBlockingUserBeanDao extends AbstractDao<AdBlockingUserBean, Void> {

    public static final String TABLENAME = "AD_BLOCKING_USER_BEAN";

    public AdBlockingUserBeanDao(DaoConfig config) {
        super(config);
    }


    public AdBlockingUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"AD_BLOCKING_USER_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"HOST_NAME\" TEXT," + // 1: hostName
                "\"HOST\" TEXT);"); // 2: host
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AD_BLOCKING_USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdBlockingUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(2, hostName);
        }

        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(3, host);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdBlockingUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(2, hostName);
        }

        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(3, host);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public AdBlockingUserBean readEntity(Cursor cursor, int offset) {
        AdBlockingUserBean entity = new AdBlockingUserBean( //
                cursor.getInt(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hostName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // host
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, AdBlockingUserBean entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setHostName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHost(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    @Override
    protected final Void updateKeyAfterInsert(AdBlockingUserBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(AdBlockingUserBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AdBlockingUserBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity AdBlockingUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property HostName = new Property(1, String.class, "hostName", false, "HOST_NAME");
        public final static Property Host = new Property(2, String.class, "host", false, "HOST");
    }

}
